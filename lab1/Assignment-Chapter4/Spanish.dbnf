-- utterances and sentences
Utt ::= Utt Puntuación # head punct
Utt ::= Conj Utt # cc head
Utt ::= NP_obl coma Utt # cc punct head
Utt ::= paréntesis_abre Utt paréntesis_cierra # punct head punct

Utt ::= S
Utt ::= QS
Utt ::= Imp
Utt ::= NP
Utt ::= AP
Utt ::= IP
Utt ::= IAdv
Utt ::= Num
Utt ::= Numeral

-- sentences
S ::= NP VP # nsubj head
S ::= NP hacer neg VP # nsubj aux advmod head
S ::= NP have neg? VP # nsubj aux advmod head
S ::= NP aux neg? have? VP # nsubj aux advmod aux head

S ::= NP cop AdV? neg? Comp # nsubj cop advmod advmod head
S ::= NP haber AdV? neg? cop Comp # nsubj aux advmod advmod cop head
S ::= NP aux AdV?  neg? have? cop Comp # nsubj aux advmod advmod aux cop head

S ::= NP cop AdV? neg? VP_pass # nsubj:pass aux:pass advmod advmod head
S ::= NP have AdV? neg? cop VP_pass # nsubj:pass aux advmod advmod aux:pass head
S ::= NP aux AdV? neg? haber? cop VP_pass # nsubj:pass aux advmod advmod aux aux:pass head

S ::= there be_V AdV? neg? NP # expl head advmod advmod nsubj
S ::= there have AdV? neg? be_V neg? NP # expl aux advmod advmod head nsubj
S ::= there aux AdV? neg? have? be_V NP # expl aux advmod advmod aux head nsubj
S ::= it cop AdV? neg? AP # expl cop advmod advmod head

S ::= NP ser_V neg? SC # nsubj head advmod ccomp
S ::= NP haber neg? ser_V SC # nsubj aux advmod head ccomp
S ::= NP aux neg? haber? ser_V SC # nsubj aux advmod aux head ccomp

S ::= SC VP # csubj head
S ::= SC hacer neg VP # csubj aux advmod head
S ::= SC cop neg? VP_pass # csubj:pass aux:pass advmod head
S ::= SC haber neg? cop VP_pass # csubj:pass aux advmod aux:pass head
S ::= S_front NP VS # parataxis nsubj head
S ::= V Adv? NP VP # head advmod nsubj obj

QS ::= hacer NP neg? VP # aux nsubj advmod head
QS ::= aux NP neg? haber? VP # aux nsubj advmod aux head
QS ::= ser NP neg? Comp # cop nsubj advmod head
QS ::= ser neg NP Comp # cop nsubj advmod head

QS ::= ser NP neg? VP_pass # aux:pass nsubj:pass advmod head
QS ::= haber NP neg? ser VP_pass # aux nsubj:pass advmod aux:pass head
QS ::= aux NP neg? haber? ser VP_pass # aux nsubj:pass advmod aux:pass aux head

QS ::= IP VP # nsubj head
QS ::= IP hacer neg VP # nsubj aux advmod head
QS ::= IP aux neg? haber? VP # nsubj aux advmod aux head
QS ::= IP ser neg? Comp # nsubj cop advmod head
QS ::= IP aux neg? haber? ser Comp # nsubj cop advmod aux head
QS ::= IP hacer NP neg? VPSlash # obj aux nsubj advmod head
QS ::= IP aux NP neg? haber? VPSlash # obj aux nsubj advmod aux head

QS ::= IP ser neg? VP_pass # nsubj:pass aux:pass advmod head
QS ::= IP haber neg? ser VP_pass # nsubj:pass aux advmod aux:pass head
QS ::= IP aux neg? haber? ser VP_pass # nsubj:pass aux advmod aux:pass aux head

QS ::= IAdv hacer NP neg? VP # advmod aux nsubj advmod head
QS ::= IAdv aux NP neg? haber? VP # advmod aux nsubj advmod aux head
QS ::= IAdv ser NP neg? Comp # advmod cop nsubj advmod head
QS ::= IAdv ser neg NP Comp # advmod cop nsubj advmod head

QS ::= IAdv ser NP neg? VP_pass # advmod aux:pass nsubj:pass advmod head

-- indirect questions
QS ::= if S # mark head
QS ::= IP NP no? VPSlash # obj<-,nsubj<-,advmod> head
QS ::= IP NP auxiliar no? haber? VPSlash # obj<-,nsubj<-,aux<-,advmod> head
QS ::= IAdv NP VP # nsubj<-,advmod> head
QS ::= IAdv NP auxiliar no? haber? VP # nsubj<-,aux<-,advmod> head
QS ::= IAdv NP copulativo no? Comp # nsubj<-,copulativo<-,advmod> head

RS ::= RP VP # nsubj head
RS ::= RP no? hacer VP # nsubj auxiliar advmod head
RS ::= RP haber no? VP # nsubj auxiliar advmod head
RS ::= RP copulativo no? Comp # nsubj copulativo advmod head
RS ::= RP haber no? copulativo Comp # nsubj auxiliar advmod copulativo head

RS ::= RP NP VPSlash # obj nsubj head
RS ::= RP NP no? hacer VPSlash # obj nsubj auxiliar advmod head
RS ::= NP VPSlash # nsubj head
RS ::= NP no? hacer VPSlash # nsubj auxiliar advmod head

-- imperatives
Imp ::= do? neg? VP # aux advmod head
Imp ::= do? neg? cop Comp # aux advmod cop head

-- sentences with adverbials
S ::= S_subcoma S # mark head punct
S ::= S S_sub # head advcl
S ::= Adv_coma S # head punct advmod
S ::= NP_oblcoma S # head punct nmod

-- embedded sentences
SC ::= S_que
SC ::= QS
SC ::= VP_infinitivo

VP ::= V
VP ::= auxiliary # # 0.001
VP ::= V2 NP # head obj
VP ::= V2 NP_obl # head obl
VP ::= V3 NP NP # head iobj obj
VP ::= V2C NP NP # head obj xcomp
VP ::= V2C NP AP # head obj xcomp
VP ::= VS S_that # head ccomp
VP ::= VV VP_to # head xcomp
VP ::= V2V NP VP # head obj xcomp
VP ::= V2V NP VP_to # head obj xcomp
VP ::= VP comma? Adv # head punct advmod
VP ::= AdV VP # advmod head
VP ::= VP NP_obl # head obl # 0.001
VP ::= VS S_direct # head parataxis

VP_pass ::= V2
VP_pass ::= V2:pass
VP_pass ::= VP_pass Adv # head advmod
VP_pass ::= VP_pass NP_obl # head nmod

VPSlash ::= V2
VPSlash ::= VPSlash NP_obl # head obl # 0.001
VPSlash ::= VPSlash Adv # head advmod
VPSlash ::= VP Prep NP # head case # 0.001

S_that ::= que? S # mark head

S_direct ::= colon S # punct head
S_direct ::= colon quote S quote # punct punct head punct
S_front ::= S comma # head punct
S_front ::= quote S quote comma # punct head punct punct

Comp ::= AP
Comp ::= NP
Comp ::= Adv
Comp ::= NP_obl
Comp ::= Comp comma? NP_obl # head punct nmod
Comp ::= Comp comma? Adv # head punct advmod

-- VP with to
VP_to ::= neg? Infinitive VP # advmod mark head
VP_to ::= neg? to cop Comp # advmod mark cop head

-- oblique noun phrase
NP_obl ::= Prep NP # case head

-- noun phrases
NP ::= Pron
NP ::= Num # # 0.1
NP ::= Det # # 0.1
NP ::= PN
NP ::= Det? CN # det head
NP ::= NP comma? NP_obl # head punct nmod
NP ::= Predet NP # det:predet head
NP ::= NP_poss CN # nmod:poss head
NP ::= Num NP # nummod head
NP ::= N PN # head flat
NP ::= NP SC # head acl
NP ::= NP comma? S_sub # head punct acl
NP ::= NP comma? RS # head punct acl:relcl
NP ::= Symb Num # head nummod
NP ::= NP comma? VP_pass # head punct acl # 0.01

NP_poss ::= NP Pron_poss # head det
NP_poss ::= NP_de NP # case head

-- some very special rules ---
NP        ::= Det CN_quoted # det head
CN_quoted ::= quote CN quote # punct head punct
NP        ::= NP NP_appos # head appos # 0.01
NP_appos  ::= Punct_appos NP # punct head

Num ::= Card
Num ::= Digits

CN ::= N
CN ::= AP CN # amod head
CN ::= CN comma? AP # head punct amod # 0.01

PN ::= PN_uno PN # head flat

N ::= N_uno N # compound head
N ::= PN CN # compound head

Card ::= Card_uno Card # compound head

IP ::= IDet CN # det head

-- adjectival phrases
AP ::= A
AP ::= AdA AP     # advmod head
AP ::= AP NP_obl  # head nmod

-- adverbials
-- Adv ::= Prep NP # case head
Adv ::= Prep NP # case head
Adv ::= Prep NP_obl # case head nmod

S_sub ::= comma? Subj S # punct mark head
S_subcomma ::= Subj S comma? # mark head punct
Adv_comma ::= Adv comma? # head punct
NP_oblcomma ::= NP_obl comma? # head punct
S_sub ::= comma? Subj VP # punct mark head # 0.1
S_subcomma ::= Subj VP comma? # mark head punct # 0.1

-- coordination
S ::= Conj_pre? ListS S_conj # cc:preconj head conj
ListS ::= S
ListS ::= ListS S_comma # head conj
S_conj ::= comma? Conj S # punct cc head
S_conj ::= comma? Conj VP # punct cc head
S_comma ::= comma S # punct head

NP ::= Conj_pre? ListNP NP_conj # cc:preconj head conj
ListNP ::= NP
ListNP ::= ListNP NP_comma # head conj
NP_conj ::= comma? Conj NP # punct cc head
NP_conj ::= comma? Conj VP # punct cc head
NP_conj ::= comma? Conj S # punct cc head
NP_comma ::= comma NP # punct head

AP ::= Conj_pre? ListAP AP_conj # cc:preconj head conj
ListAP ::= AP
ListAP ::= ListAP AP_comma # head conj
AP_conj ::= comma? Conj AP # punct cc head
AP_conj ::= comma? Conj NP # punct cc head
AP_conj ::= comma? Conj VP # punct cc head
AP_conj ::= comma? Conj S # punct cc head
AP_comma ::= comma AP # punct head
AP_comma ::= comma? AP # punct head

VP ::= Conj_pre? ListVP VP_conj # cc:preconj head conj
ListVP ::= VP
ListVP ::= ListVP VP_comma # head conj
VP_conj ::= comma? Conj VP # punct cc head
VP_comma ::= comma VP # punct head

-- in Adv conjunctions, we want to include NP_obl parts: all that matters for UD is the category of the first conjunct
Adv ::= Conj_pre? ListAdv Adv_conj # cc:preconj head conj
ListAdv ::= Adv
ListAdv ::= ListAdv Adv_comma # head conj
Adv_conj ::= comma? Conj Adv # punct cc head
Adv_conj ::= comma? Conj NP_obl # punct cc head
Adv_comma ::= comma Adv # punct head
Adv_comma ::= comma NP_obl # punct head

NP_obl ::= Conj_pre? ListNP_obl Adv_conj # cc:preconj head conj
ListNP_obl ::= NP_obl
ListNP_obl ::= ListNP_obl Adv_comma # head conj

Conj_pre ::= y Conj Utt comma punct Conj_pre # cc head punct conj
Conj_pre ::= Conj Utt comma punct Conj_pre # cc head punct conj
Conj_pre ::= o Conj Utt comma punct Conj_pre # cc head punct conj
Conj_pre ::= ni Conj Utt comma punct Conj_pre # cc head punct conj
Conj_pre ::= ya sea Utt Conj_pre # head conj
Conj_pre ::= ya Utt Conj_pre # head conj
Conj_pre ::= ya bien sea Utt Conj_pre # head conj
Conj_pre ::= bien Utt Conj_pre # head conj
Conj_pre ::= ni Utt Conj_pre # head conj

Adv ::= Conj_pre? ListAdv Adv_conj # cc:preconj head conj
ListAdv ::= Adv
ListAdv ::= ListAdv Adv_comma # head conj
Adv_conj ::= comma? Conj Adv # punct cc head
Adv_conj ::= comma? Conj NP_obl # punct cc head
Adv_comma ::= comma Adv # punct head
Adv_comma ::= comma NP_obl # punct head

NP_obl ::= Conj_pre? ListNP_obl Adv_conj # cc:preconj head conj
ListNP_obl ::= NP_obl
ListNP_obl ::= ListNP_obl Adv_comma # head conj


-- POS tag configurations
#pos AUX cop do have aux
#pos VERB V V2 V3 VS VV V2V V2C be_V
#pos NOUN N N_one
#pos ADJ A
#pos PROPN PN PN_one
#pos ADV Adv IAdv AdA AdV Predet neg
#pos SCONJ Subj that if whether
#pos CCONJ Conj Conj_pre
#pos DET Det IDet
#pos PRON Pron IP RP Pron_poss there it
#pos PART to 's
#pos PUNCT Punct Punct_appos comma quote colon parenth ¿ ¡
#pos NUM Card Digits Card_one
#pos ADP Prep
#pos SYM Symb

-- structural word lexicon: normal categories
#token Prep a al ante bajo con contra de desde en entre hacia hasta mediante para por según sin sobre tras
#token IP quién quiénes qué cuál cuáles cómo cuánto cuántos cuán dónde adónde de dónde por qué
#token IAdv cuando donde adónde por qué cómo
#token AdA muy demasiado genéticamente
#token AdV definitivamente siempre nunca
#token Det un una el la los las cada algunos muchas ningún
#token Pron yo me tú te él lo ella la ello nosotras nosotres nos les ustedes ellos ellas
#token Subj si cuando aunque porque como
#token aux poder poder haber haber deber querer querer deber querer
#token Punct . ! ? ¡ ¿ , ; : -
#token Conj y o ni
#token Conj_pre ambos ambos ninguna ninguna aunque como con cuando hasta mientras si según
#token IDet cual cuales cuyo cuyos
#token Pron_poss mi tu su sus nuestro nuestra vuestro vuestra su sus
#token RP que quien quienes
#token Card cinco

-- structural word lexicon: syncategorematic words
#token cop ser soy eres es somos sois son era eras era éramos erais eran sido siendo
#token be_V ser soy eres es somos sois son era eras era éramos erais eran sido siendo
#token do hacer hace hacemos hacéis hacen hacía hacías hacíamos hacíais hacían
#token have tener tengo tienes tiene tenemos tenéis tienen tenía tenías teníamos teníais tenían
#token neg no
#token that que
#token to a
#token it lo la le los las les
#token if si
#token there ahí allí allá
#token comma ,
#token colon :
#token quote "
#token 's 's
#token parenth ( ) [ ] { }

-- content word lexicon
#token PN Juan Maria Adán
#token V duerme dormir dormido caminar camina caminado cantar canta cantado mover mueve movido pasar pasa pasado dejar deja dejado correr corre corrido
#token V2 ver ve veía visto amar ama amado mirar mira dar da dado preocupar preocupa preocupado hacer hace hecho decidir decide decidido
#token V2 saber sabe sabía sabido conocer conoce conocido
#token V3 dar da dado
#token V2C llamar llama llamado considerar considera considerado
#token V2V ver ve veía considerar considera considerado detener detiene detenido
#token VS decir dice dicho creer cree creído
#token VV querer quiere querido intentar intenta intentado
#token A viejo bueno curioso negro mejor frío modificado cansado mal grande más grande
#token N amor sueño amores sueños hombre hombres mujer mujeres gato gatos doctor cerveza mundo elefante habitación pista razón razones perdedor perdedores película vida
#token N casa presidente luna Tierra niña niñas vino cerveza
#token Adv ahora hoy aquí antes allí ayer mañana siempre
#token Predet probablemente solo
#token Symb $